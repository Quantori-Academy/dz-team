import { z } from "zod";
import { BaseSearchSchema } from "../baseSchemas";

const SearchFieldEnum = z.enum([
    "name",
    "description",
    "room",
    "structure",
    "cas",
    "producer",
    "catalogId",
    "catalogLink",
]);

// THIS SCHEMA IS USED TILL REPLACEMENT IS FOUND IN AUTOGENERATED SCHEMAS

export const ReagentSearchSchema = BaseSearchSchema.extend({
    sortBy: z
        .enum([
            "name",
            "description",
            "structure",
            "category",
            "quantity",
            "status",
            "expirationDate",
            "storageLocation",
            "cas",
            "producer",
            "catalogId",
            "catalogLink",
            "pricePerUnit",
            "createdAt",
            "updatedAt",
        ])
        .default("name")
        .describe("The field by which the results should be sorted. Default is 'name'."),

    searchBy: z
        .union([
            z.array(SearchFieldEnum), // allows multiple fields for search
            SearchFieldEnum,
        ])
        .transform((val) => (Array.isArray(val) ? val : [val]))
        .optional()
        .describe("Fields to search by. Can be a single value or an array of values."),

    category: z
        .enum(["sample", "reagent"])
        .optional()
        .describe("Filter reagents by category, such as 'sample' or 'reagent'."),
    status: z
        .enum(["available", "lowStock", "outOfStock", "ordered", "notAvailable"])
        .optional()
        .describe(
            "Filter reagents by status. Options include 'available', 'lowStock', 'outOfStock', 'ordered', or 'notAvailable'.",
        ),

    storageLocation: z.string().optional().describe("Filter reagents by their storage location."),
});

export type ReagentSearch = z.infer<typeof ReagentSearchSchema>;
