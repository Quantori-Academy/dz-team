import { z } from "zod";
import userSchema, { UserSchema } from "./generated/zod/modelSchema/UserSchema";

export const idSchema = z.string().uuid();

const ReagentSearchFieldEnum = z.enum([
    "name",
    "description",
    "structure",
    "cas",
    "producer",
    "catalogId",
    "catalogLink",
]);

export type ReagentSearchField = z.infer<typeof ReagentSearchFieldEnum>;

// THIS SCHEMA IS USED TILL REPLACEMENT IS FOUND IN AUTOGENERATED SCHEMAS
export const ReagentSearchSchema = z.object({
    query: z.string().optional(),
    page: z.coerce.number().int().positive().default(1),
    limit: z.coerce.number().int().positive().max(100).default(10),
    sortBy: z
        .enum([
            "name",
            "description",
            "structure",
            "category",
            "quantity",
            "status",
            "expirationDate",
            "storageLocation",
            "cas",
            "producer",
            "catalogId",
            "catalogLink",
            "pricePerUnit",
            "createdAt",
            "updatedAt",
        ])
        .default("name"),
    sortOrder: z.enum(["asc", "desc"]).default("asc"),
    searchBy: z
        .union([
            z.array(ReagentSearchFieldEnum), // array allows for multiple items selection
            ReagentSearchFieldEnum,
        ])
        .transform((val) => {
            return Array.isArray(val) ? val : [val];
        })
        .optional(), // output array of strings or array with a single string
    category: z
        .enum([
            "organic",
            "inorganic",
            "acidic",
            "basic",
            "oxidizing",
            "reducing",
            "precipitating",
            "complexing",
            "indicator",
            "other",
        ])
        .optional(),
    status: z
        .enum(["available", "low_stock", "out_of_stock", "ordered", "not_available"])
        .optional(),
    storageLocation: z.string().optional(),
});

export type ReagentSearch = z.infer<typeof ReagentSearchSchema>;

// Define the login schema
export const loginUserSchema = z.object({
    username: z
        .string()
        .min(1, {
            message: "Username is required.",
        })
        .max(50, {
            message: "Username must not exceed 50 characters.",
        })
        .refine((val) => val.trim() !== "", {
            message: "Username cannot be empty.",
        }),
    password: z.string().min(8, {
        message: "Password must be at least 8 characters long.",
    }),
});

export type User = z.infer<typeof userSchema>;

export type LoginUser = z.infer<typeof loginUserSchema>;

export const updateUserSchema = z.object({
    firstName: z
        .string()
        .min(1, {
            message: "First name is required.",
        })
        .optional(), // Optional for partial updates
    lastName: z
        .string()
        .min(1, {
            message: "Last name is required.",
        })
        .optional(),
    email: z
        .string()
        .email({
            message: "Invalid email format.",
        })
        .optional(),
    password: z
        .string()
        .min(8, {
            message: "Password must be at least 8 characters long.",
        })
        .optional(),
    role: z
        .enum(["admin", "researcher", "procurementOfficer"], {
            message: "Role must be either admin, researcher, or procurementOfficer.",
        })
        .optional(),
});

// Type inference for UpdateUser
export type UpdateUser = z.infer<typeof updateUserSchema>;

export const publicUserSchema = UserSchema.omit({ password: true });
