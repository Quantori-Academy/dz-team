/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LoginImport } from "./routes/login";
import { Route as AppImport } from "./routes/_app";
import { Route as AppIndexImport } from "./routes/_app/index";
import { Route as AppUsersImport } from "./routes/_app/users";
import { Route as AppStorageImport } from "./routes/_app/storage";
import { Route as AppSettingsImport } from "./routes/_app/settings";
import { Route as AppRequestsImport } from "./routes/_app/requests";
import { Route as AppProfileImport } from "./routes/_app/profile";
import { Route as AppOrdersImport } from "./routes/_app/orders";
import { Route as AppNewUserImport } from "./routes/_app/newUser";
import { Route as AppListImport } from "./routes/_app/list";
import { Route as AppDevImport } from "./routes/_app/dev";
import { Route as AppDashboardImport } from "./routes/_app/dashboard";
import { Route as AppReagentsIdImport } from "./routes/_app/reagents/$id";

// Create/Update Routes

const LoginRoute = LoginImport.update({
    id: "/login",
    path: "/login",
    getParentRoute: () => rootRoute,
} as any);

const AppRoute = AppImport.update({
    id: "/_app",
    getParentRoute: () => rootRoute,
} as any);

const AppIndexRoute = AppIndexImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => AppRoute,
} as any);

const AppUsersRoute = AppUsersImport.update({
    id: "/users",
    path: "/users",
    getParentRoute: () => AppRoute,
} as any);

const AppStorageRoute = AppStorageImport.update({
    id: "/storage",
    path: "/storage",
    getParentRoute: () => AppRoute,
} as any);

const AppSettingsRoute = AppSettingsImport.update({
    id: "/settings",
    path: "/settings",
    getParentRoute: () => AppRoute,
} as any);

const AppRequestsRoute = AppRequestsImport.update({
    id: "/requests",
    path: "/requests",
    getParentRoute: () => AppRoute,
} as any);

const AppProfileRoute = AppProfileImport.update({
    id: "/profile",
    path: "/profile",
    getParentRoute: () => AppRoute,
} as any);

const AppOrdersRoute = AppOrdersImport.update({
    id: "/orders",
    path: "/orders",
    getParentRoute: () => AppRoute,
} as any);

const AppNewUserRoute = AppNewUserImport.update({
    id: "/newUser",
    path: "/newUser",
    getParentRoute: () => AppRoute,
} as any);

const AppListRoute = AppListImport.update({
    id: "/list",
    path: "/list",
    getParentRoute: () => AppRoute,
} as any);

const AppDevRoute = AppDevImport.update({
    id: "/dev",
    path: "/dev",
    getParentRoute: () => AppRoute,
} as any);

const AppDashboardRoute = AppDashboardImport.update({
    id: "/dashboard",
    path: "/dashboard",
    getParentRoute: () => AppRoute,
} as any);

const AppReagentsIdRoute = AppReagentsIdImport.update({
    id: "/reagents/$id",
    path: "/reagents/$id",
    getParentRoute: () => AppRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/_app": {
            id: "/_app";
            path: "";
            fullPath: "";
            preLoaderRoute: typeof AppImport;
            parentRoute: typeof rootRoute;
        };
        "/login": {
            id: "/login";
            path: "/login";
            fullPath: "/login";
            preLoaderRoute: typeof LoginImport;
            parentRoute: typeof rootRoute;
        };
        "/_app/dashboard": {
            id: "/_app/dashboard";
            path: "/dashboard";
            fullPath: "/dashboard";
            preLoaderRoute: typeof AppDashboardImport;
            parentRoute: typeof AppImport;
        };
        "/_app/dev": {
            id: "/_app/dev";
            path: "/dev";
            fullPath: "/dev";
            preLoaderRoute: typeof AppDevImport;
            parentRoute: typeof AppImport;
        };
        "/_app/list": {
            id: "/_app/list";
            path: "/list";
            fullPath: "/list";
            preLoaderRoute: typeof AppListImport;
            parentRoute: typeof AppImport;
        };
        "/_app/newUser": {
            id: "/_app/newUser";
            path: "/newUser";
            fullPath: "/newUser";
            preLoaderRoute: typeof AppNewUserImport;
            parentRoute: typeof AppImport;
        };
        "/_app/orders": {
            id: "/_app/orders";
            path: "/orders";
            fullPath: "/orders";
            preLoaderRoute: typeof AppOrdersImport;
            parentRoute: typeof AppImport;
        };
        "/_app/profile": {
            id: "/_app/profile";
            path: "/profile";
            fullPath: "/profile";
            preLoaderRoute: typeof AppProfileImport;
            parentRoute: typeof AppImport;
        };
        "/_app/requests": {
            id: "/_app/requests";
            path: "/requests";
            fullPath: "/requests";
            preLoaderRoute: typeof AppRequestsImport;
            parentRoute: typeof AppImport;
        };
        "/_app/settings": {
            id: "/_app/settings";
            path: "/settings";
            fullPath: "/settings";
            preLoaderRoute: typeof AppSettingsImport;
            parentRoute: typeof AppImport;
        };
        "/_app/storage": {
            id: "/_app/storage";
            path: "/storage";
            fullPath: "/storage";
            preLoaderRoute: typeof AppStorageImport;
            parentRoute: typeof AppImport;
        };
        "/_app/users": {
            id: "/_app/users";
            path: "/users";
            fullPath: "/users";
            preLoaderRoute: typeof AppUsersImport;
            parentRoute: typeof AppImport;
        };
        "/_app/": {
            id: "/_app/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof AppIndexImport;
            parentRoute: typeof AppImport;
        };
        "/_app/reagents/$id": {
            id: "/_app/reagents/$id";
            path: "/reagents/$id";
            fullPath: "/reagents/$id";
            preLoaderRoute: typeof AppReagentsIdImport;
            parentRoute: typeof AppImport;
        };
    }
}

// Create and export the route tree

interface AppRouteChildren {
    AppDashboardRoute: typeof AppDashboardRoute;
    AppDevRoute: typeof AppDevRoute;
    AppListRoute: typeof AppListRoute;
    AppNewUserRoute: typeof AppNewUserRoute;
    AppOrdersRoute: typeof AppOrdersRoute;
    AppProfileRoute: typeof AppProfileRoute;
    AppRequestsRoute: typeof AppRequestsRoute;
    AppSettingsRoute: typeof AppSettingsRoute;
    AppStorageRoute: typeof AppStorageRoute;
    AppUsersRoute: typeof AppUsersRoute;
    AppIndexRoute: typeof AppIndexRoute;
    AppReagentsIdRoute: typeof AppReagentsIdRoute;
}

const AppRouteChildren: AppRouteChildren = {
    AppDashboardRoute: AppDashboardRoute,
    AppDevRoute: AppDevRoute,
    AppListRoute: AppListRoute,
    AppNewUserRoute: AppNewUserRoute,
    AppOrdersRoute: AppOrdersRoute,
    AppProfileRoute: AppProfileRoute,
    AppRequestsRoute: AppRequestsRoute,
    AppSettingsRoute: AppSettingsRoute,
    AppStorageRoute: AppStorageRoute,
    AppUsersRoute: AppUsersRoute,
    AppIndexRoute: AppIndexRoute,
    AppReagentsIdRoute: AppReagentsIdRoute,
};

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren);

export interface FileRoutesByFullPath {
    "": typeof AppRouteWithChildren;
    "/login": typeof LoginRoute;
    "/dashboard": typeof AppDashboardRoute;
    "/dev": typeof AppDevRoute;
    "/list": typeof AppListRoute;
    "/newUser": typeof AppNewUserRoute;
    "/orders": typeof AppOrdersRoute;
    "/profile": typeof AppProfileRoute;
    "/requests": typeof AppRequestsRoute;
    "/settings": typeof AppSettingsRoute;
    "/storage": typeof AppStorageRoute;
    "/users": typeof AppUsersRoute;
    "/": typeof AppIndexRoute;
    "/reagents/$id": typeof AppReagentsIdRoute;
}

export interface FileRoutesByTo {
    "/login": typeof LoginRoute;
    "/dashboard": typeof AppDashboardRoute;
    "/dev": typeof AppDevRoute;
    "/list": typeof AppListRoute;
    "/newUser": typeof AppNewUserRoute;
    "/orders": typeof AppOrdersRoute;
    "/profile": typeof AppProfileRoute;
    "/requests": typeof AppRequestsRoute;
    "/settings": typeof AppSettingsRoute;
    "/storage": typeof AppStorageRoute;
    "/users": typeof AppUsersRoute;
    "/": typeof AppIndexRoute;
    "/reagents/$id": typeof AppReagentsIdRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    "/_app": typeof AppRouteWithChildren;
    "/login": typeof LoginRoute;
    "/_app/dashboard": typeof AppDashboardRoute;
    "/_app/dev": typeof AppDevRoute;
    "/_app/list": typeof AppListRoute;
    "/_app/newUser": typeof AppNewUserRoute;
    "/_app/orders": typeof AppOrdersRoute;
    "/_app/profile": typeof AppProfileRoute;
    "/_app/requests": typeof AppRequestsRoute;
    "/_app/settings": typeof AppSettingsRoute;
    "/_app/storage": typeof AppStorageRoute;
    "/_app/users": typeof AppUsersRoute;
    "/_app/": typeof AppIndexRoute;
    "/_app/reagents/$id": typeof AppReagentsIdRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths:
        | ""
        | "/login"
        | "/dashboard"
        | "/dev"
        | "/list"
        | "/newUser"
        | "/orders"
        | "/profile"
        | "/requests"
        | "/settings"
        | "/storage"
        | "/users"
        | "/"
        | "/reagents/$id";
    fileRoutesByTo: FileRoutesByTo;
    to:
        | "/login"
        | "/dashboard"
        | "/dev"
        | "/list"
        | "/newUser"
        | "/orders"
        | "/profile"
        | "/requests"
        | "/settings"
        | "/storage"
        | "/users"
        | "/"
        | "/reagents/$id";
    id:
        | "__root__"
        | "/_app"
        | "/login"
        | "/_app/dashboard"
        | "/_app/dev"
        | "/_app/list"
        | "/_app/newUser"
        | "/_app/orders"
        | "/_app/profile"
        | "/_app/requests"
        | "/_app/settings"
        | "/_app/storage"
        | "/_app/users"
        | "/_app/"
        | "/_app/reagents/$id";
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    AppRoute: typeof AppRouteWithChildren;
    LoginRoute: typeof LoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
    AppRoute: AppRouteWithChildren,
    LoginRoute: LoginRoute,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/login"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/dashboard",
        "/_app/dev",
        "/_app/list",
        "/_app/newUser",
        "/_app/orders",
        "/_app/profile",
        "/_app/requests",
        "/_app/settings",
        "/_app/storage",
        "/_app/users",
        "/_app/",
        "/_app/reagents/$id"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_app/dashboard": {
      "filePath": "_app/dashboard.tsx",
      "parent": "/_app"
    },
    "/_app/dev": {
      "filePath": "_app/dev.tsx",
      "parent": "/_app"
    },
    "/_app/list": {
      "filePath": "_app/list.tsx",
      "parent": "/_app"
    },
    "/_app/newUser": {
      "filePath": "_app/newUser.tsx",
      "parent": "/_app"
    },
    "/_app/orders": {
      "filePath": "_app/orders.tsx",
      "parent": "/_app"
    },
    "/_app/profile": {
      "filePath": "_app/profile.tsx",
      "parent": "/_app"
    },
    "/_app/requests": {
      "filePath": "_app/requests.tsx",
      "parent": "/_app"
    },
    "/_app/settings": {
      "filePath": "_app/settings.tsx",
      "parent": "/_app"
    },
    "/_app/storage": {
      "filePath": "_app/storage.tsx",
      "parent": "/_app"
    },
    "/_app/users": {
      "filePath": "_app/users.tsx",
      "parent": "/_app"
    },
    "/_app/": {
      "filePath": "_app/index.tsx",
      "parent": "/_app"
    },
    "/_app/reagents/$id": {
      "filePath": "_app/reagents/$id.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
