// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init




// ***NOTE: run `npx prisma generate` to generate new zod schemas in `shared/generated/zod` every time a model in this file is modified***




generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../../shared/generated/zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = true // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = true // default is false
  createPartialTypes               = true // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = true // default is false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [rdkit]
}

  // with `dbgenerated("gen_random_uuid()")` UUID is generated on the DB level in POSTGRES
  // with `uuid()` UUID is generated on Prisma level
  // see "Native database functions" in Prisma docs

  // zod-prisma-types "rich-comment" after three slashes adds "Field validators"
  // see zod-prisma-types docs for the syntax and zod docs for validators
enum Category {
  reagent
  sample
}

enum Currency {
  usd
  euro
  rub
  cny
  jpy
}

enum Container {
  bottle
  box
  other
}

enum ReagentType {
  organic
  inorganic
  acidic
  basic
  oxidizing
  reducing
  precipitating
  complexing
  indicator
  other
}

enum ReagentStatus {
  available
  lowStock
  outOfStock
  ordered
  notAvailable
}

enum Unit {
  ml
  l
  mg
  g
  oz
  lb
}


model Reagent {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// @zod.string.uuid()
  name            String            // Name of the reagent
  structure       String?           // Stores the chemical structure
  description     String            // Description of the reagent
  quantity        Float             // Quantity left in stock
  unit            Unit              @default(ml) // Unit of measurement ("ml", "l", "mg", "g", "oz", "lb")
  quantityInit     Float?            // Initial quantity of the reagent (e.g., 500 ml)
  container       Container?        // Sample container ("bottle", "box", etc)
  expirationDate  DateTime?         // Expiry date of the reagent
  storageLocation String?           // Storage location: Room, Cabinet, Shelf
  cas             String?           // CAS number for reagent-specific info
  producer        String?           // Manufacturer or supplier
  catalogId       String?           // Catalog identifier
  catalogLink     String?           // URL to the product catalog
  pricePerUnit    Float?            // Price per unit
  currency        Currency          @default(usd) // Currency used (usd, euro, etc..)
  category        Category          @default(reagent) // Category ("reagent")
  type            ReagentType?      // Type of the reagent ("organic", "inorganic", "acidic", "basic", "oxidizing", "reducing", "precipitating", "complexing", "indicator", "other")
  status          ReagentStatus?    // Status of availability of the reagent ("available", "lowStock", "outOfStock", "ordered", "notAvailable")
  deletedAt       DateTime?         // Date and Time of soft deletion
  createdAt       DateTime          @default(now()) // Date and Time of Reagent creation
  updatedAt       DateTime          @updatedAt // Date and Time of Reagent modification

  // Many-to-Many relation with Sample
  samples         Sample[]          @relation("ReagentSamples") // List of Samples where Reagent is used
  // Many-to-One relation with StorageLocation
  storageId       String?            @db.Uuid /// @zod.string.uuid() // Storage location of the Reagent
  storage         StorageLocation?   @relation(fields: [storageId], references: [id])
}

enum Storage {
  block
  building
  warehouse
  room
  cabinet
  shelf
  box
  refrigerator
  freezer
  container
  bag
  desiccator
  glovebox
}

model StorageLocation {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// @zod.string.uuid()
  room                  String        // room where the storage location is located (Autocomplete), e.g. Building 1, Room 12
  name                  String        // exact location in the room(Autocomplete), e.g. Cabinet 1, shelf 3
  description           String?       //
  level1                Storage?      // Level 1 storage type
  value1                String?       // level1 value. (ex: "Room 123", "Warehouse A")
  level2                Storage?      // Level 2 storage type
  value2                String?       // level2 value
  level3                Storage?      // Level 3 storage type
  value3                String?       // level3 value
  level4                Storage?      // Level 4 storage type
  value4                String?       // level4 value
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  // One-to-Many relation with Reagent
  reagents              Reagent[]     @relation() // List of Reagents contained in the Storage
  // One-to-Many relation with Sample
  samples               Sample[]      @relation() // List of Samples contained in the Storage

}



model Sample {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// @zod.string.uuid()
  name            String     // Name of the sample
  structure       String?    // Chemical structure
  description     String     // Description of the sample
  quantity        Float      // Quantity left in stock
  quantityInit    Float?     // Initial quantity of the sample (e.g., 500 ml)
  unit            Unit       @default(ml) // Unit of measurement ("ml", "l", "mg", "g", "oz", "lb")
  storageLocation String?           // Storage location: Room, Cabinet, Shelf
  category        Category   @default(sample) // Category ("sample")
  container       Container? // Sample container ("bottle", "box", etc)
  deletedAt       DateTime?  // Date and Time of soft deletion
  createdAt       DateTime   @default(now()) // Date and Time of Sample creation
  updatedAt       DateTime   @updatedAt // Date and Time of Sample modification

  // Many-to-Many relation with Reagent
  reagents        Reagent[]  @relation("ReagentSamples") // List of Reagents used for the Sample
  // Many-to-One relation with StorageLocation
  storageId       String            @db.Uuid /// @zod.string.uuid() // Storage location of the Reagent
  storage         StorageLocation   @relation(fields: [storageId], references: [id])
}

enum Role {
  admin
  procurementOfficer
  researcher
}

model User {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// @zod.string.uuid()
  username       String   @unique // username an unique field
  firstName      String
  lastName       String
  email          String   @unique // email an unique field
  password       String
  role           Role
  lastLoginDate  DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}




